// # code1
import java.util.* ; 
public class BinarSearch{
    public static void findMin(int arr[] , int  low , int high){
        int ans = -1 ; 
        while(low < high){
            int mid = low + (high - low)/2 ; 
            if(arr[low] > arr[mid]){
                ans = mid ; 
                if(mid> 0 && arr[mid -1] > arr[mid])break ; 
                high = mid - 1 ; 
            }else if(arr[low] < arr[mid] && arr[mid+1] < arr[mid]){
                ans = mid+1 ; 
                break ; 
            }else low = mid +1 ; 
        }
        System.out.println(ans == -1 ? 0 : ans) ; 
        
    }
    public static void main(String[]args){
        Scanner sc = new Scanner(System.in); 
        int n = sc.nextInt() ; 
        int arr[] = new int[n]  ; 
        for(int i = 0 ; i < n ; i++){
            arr[i] = sc.nextInt() ; 
        }
        findMin(arr  , 0 , arr.length -1) ; 
    }
}





// #code2

// C++ program to find minimum element in a 
// sorted and rotated array using binary search

#include <iostream>
#include <vector>
using namespace std;

int findMin(vector<int> &arr) {
    int lo = 0, hi = arr.size() - 1;

    while (lo < hi) {
      
        // The current subarray is already sorted, 
        // the minimum is at the low index
        if (arr[lo] < arr[hi])        
            return arr[lo];
           
        // We reach here when we have at least
        // two elements and the current subarray
        // is rotated
      
        int mid = (lo + hi) / 2;

        // The right half is not sorted. So 
        // the minimum element must be in the
        // right half.
        if (arr[mid] > arr[hi])
            lo = mid + 1;
      
        // The right half is sorted. Note that in 
        // this case, we do not change high to mid - 1
        // but keep it to mid. As the mid element
        // itself can be the smallest
        else
            hi = mid;
    }

    return arr[lo]; 
}

int main() {
    vector<int> arr = {5, 6, 1, 2, 3, 4};
    cout << findMin(arr) << endl;
    return 0;
}
